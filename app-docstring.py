
from openai import ChatCompletion
import os
from pathlib import Path
import tiktoken


class CodeCleaner():
    def __init__(self) -> None:
        '''
        Initialize the CodeCleaner class with model_name, api_key and code attributes.
        '''
        self.model_name = "gpt-3.5-turbo-1106"
        self.api_key = os.getenv("OPENAI_API_KEY")
        self.code = ""

        if not self.api_key:
            ValueError("API key is required. Set the OPENAI_API_KEY environment variable.")

    def num_tokens_from_string(self, string: str, encoding_name="cl100k_base") -> int:
        '''
        Returns the number of tokens in a text string.

        Parameters:
        - string (str): The input text string.
        - encoding_name (str): The encoding name (default is "cl100k_base").

        Returns:
        int: The number of tokens in the text string.
        '''
        encoding = tiktoken.get_encoding(encoding_name)
        num_tokens = len(encoding.encode(string))
        return num_tokens


    def run_openai(self, messages: list) -> str:
        '''
        Run OpenAI ChatCompletion to generate a response.

        Parameters:
        - messages (list): The list containing system and user messages.

        Returns:
        str: The response message generated by OpenAI ChatCompletion.
        '''
        max_tokens = self.num_tokens_from_string(str(messages))
        response = ChatCompletion.create(
            model=self.model_name,
            messages=messages,
            max_tokens=int(max_tokens*1.5)
        )
        return response.choices[0].message.content

    def openai_messages(self, system_message="", user_message=""):
        '''
        Creates a prompt list for system and user messages.

        Parameters:
        - system_message (str): The system message (default is an empty string).
        - user_message (str): The user message (default is an empty string).

        Returns:
        list: The list containing the prompt for system and user messages.
        '''
        prompt = [
        {'role': 'system', 'content': system_message},
        {'role': 'user', 'content': user_message}
        ]
        return prompt

    def read_python_file(self, file_path: str) -> None:
        '''
        Reads the content of a python file.

        Parameters:
        - file_path (str): The path to the python file.

        Returns:
        None
        '''
        try:
            with open(file_path, 'r') as file:
                self.code = file.read()
        except FileNotFoundError:
            print(f"Error: File not found - {file_path}")
            return None
        except Exception as e:
            print(f"Error: {e}")
            return None

    def convert_to_docstrings(self, python_output_file_path: str) -> None:
        '''
        Generates docstrings for the provided python code and writes the modified code to a new file.

        Parameters:
        - python_output_file_path (str): The path for the output python file containing the modified code.

        Returns:
        None
        '''
        system_message = self.docstring_generator_prompt()
        user_message = f"""{self.code}"""
        results = self.run_openai(messages=self.openai_messages(system_message, user_message))

        new_code = results.split("```python",1)[-1][::-1].split("```",1)[-1][::-1]
        with open(python_output_file_path, 'w', encoding='utf-8') as python_file:
            python_file.write(new_code)
        print(results)
        print(f'Python code successfully written to: {python_output_file_path}')

    def convert_to_markdown(self, readme_path: str) -> None:
        '''
        Generates a readme markdown document for the provided python code.

        Parameters:
        - readme_path (str): The path for the output readme markdown document.

        Returns:
        None
        '''
        system_message = self.markdown_document_prompt()
        user_message = f"""{self.code}"""
        results = self.run_openai(messages=self.openai_messages(system_message, user_message))

        with open(readme_path, 'w', encoding='utf-8') as file:
            file.write(results)
        print(f'Readme successfully written to: {readme_path}')

    def markdown_document_prompt(self) -> str:
        '''
        Generates a prompt message for creating a readme markdown document.

        Returns:
        str: The prompt message for creating a readme markdown document.
        '''
        system_message = """
        Your task is to create a README markdown document for the provided code. Here are some suggestions:
        Create a Markdown document describing the functionality, usage, and important details of the following code. Assume the target audience is developers who may need to understand, use, or contribute to the codebase.
        Instructions:

        Provide a title
        Provide a brief overview of the code's purpose and functionality.
        Include any dependencies or prerequisites needed to run the code successfully.
        Explain how to use the code, including relevant function/method calls or key parameters.
        If applicable, provide code examples or use cases to illustrate the code in action.
        Include information on any configuration options or settings that users may need to customize.
        Highlight important design decisions, algorithms, or patterns used in the code.
        Mention any known issues, limitations, or future improvements for the codebase.
        Use proper Markdown formatting for headings, code blocks, lists, and any other relevant elements.
        """
        return system_message

    def docstring_generator_prompt(self) -> str:
        '''
        Generates a prompt message for generating docstrings and adding comments to the provided python code.

        Returns:
        str: The prompt message for generating docstrings and adding comments.
        '''
        system_message = """Your task will be to generate docstrings and add comments to a provided python code.
        You will also spcifiy in the define function statement for each input the desired type and the desired output type for all functions.
        Do not modify the code. It MUST stay in its current form. Insert the docstrings for each function and add some short comments if necessary.
        IF there are any parent classes that are inherited using super(), use ':meth:`MyBaseClass.some_method`' 
        For the output format, SHOW THE COMPLETE CODE with the added docstrings and comments:
        ```python
        <python code>
        ```
        Here is an example of a docstring for a function:
        def calculate_area_of_rectangle(length, width):
        '''
        Calculate the area of a rectangle.

        Parameters:
        - length (float): The length of the rectangle.
        - width (float): The width of the rectangle.

        Returns:
        float: The area of the rectangle.
        '''
        area = length * width
        return area
        """
        return system_message

if __name__ == "__main__":
    openai_code_cleaner = CodeCleaner()
    file_path = Path("app.py")
    # read python file
    openai_code_cleaner.read_python_file(file_path)
    
    # Example: Convert to docstrings only
    openai_code_cleaner.convert_to_docstrings(python_output_file_path="app-docstring.py")

    # Example: Create a readme document
    openai_code_cleaner.read_python_file(file_path="app-docstring.py")
    openai_code_cleaner.convert_to_markdown(readme_path="README.md")
